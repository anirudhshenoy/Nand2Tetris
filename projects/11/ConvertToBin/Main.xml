<class>
	<keyword>class</keyword>
	<identifier>Main</identifier>
	<symbol>{</symbol>
	<subroutineDec>
		<keyword>function</keyword>
		<keyword>void</keyword>
		<identifier>main</identifier>
		<symbol>(</symbol>
		<parameterList>
</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<varDec>
				<keyword>var</keyword>
				<keyword>int</keyword>
				<identifier>value</identifier>
				<symbol>;</symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<identifier>Main</identifier>
					<symbol>.</symbol>
					<identifier>fillMemory</identifier>
					<expressionList>
						<expression>
							<term/>
						</expression>
						<symbol>,</symbol>
						<expression>
							<term/>
						</expression>
						<symbol>,</symbol>
					</expressionList>
					<symbol>;</symbol>
				</doStatement>
				<letStatement>
					<keyword>let</keyword>
					<symbol>=</symbol>
					<expression>
						<term>
							<expressionList/>
						</term>
					</expression>
				</letStatement>
				<doStatement>
					<keyword>do</keyword>
					<identifier>Main</identifier>
					<symbol>.</symbol>
					<identifier>convert</identifier>
					<expressionList/>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>function</keyword>
		<keyword>void</keyword>
		<identifier>convert</identifier>
		<symbol>(</symbol>
		<parameterList>
			<keyword>int</keyword>
			<identifier>value</identifier>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<varDec>
				<keyword>var</keyword>
				<keyword>int</keyword>
				<identifier>mask</identifier>
				<symbol>,</symbol>
				<identifier>position</identifier>
				<symbol>;</symbol>
			</varDec>
			<varDec>
				<keyword>var</keyword>
				<keyword>boolean</keyword>
				<identifier>loop</identifier>
				<symbol>;</symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword>let</keyword>
					<symbol>=</symbol>
					<expression>
						<term/>
					</expression>
				</letStatement>
				<whileStatement>
					<expression>
						<term/>
					</expression>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<symbol>=</symbol>
							<expression>
								<term/>
								<term/>
							</expression>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<symbol>=</symbol>
							<expression>
								<term>
									<expressionList/>
								</term>
							</expression>
						</letStatement>
						<ifStatement>
							<keyword>if</keyword>
							<symbol>(</symbol>
							<expression>
								<term>
									<term>
										<expression>
											<term/>
											<term/>
										</expression>
									</term>
								</term>
							</expression>
						</ifStatement>
						<ifStatement>
							<keyword>if</keyword>
							<symbol>(</symbol>
							<expression>
								<term>
									<term>
										<expression>
											<term>
												<expression>
													<term/>
													<term/>
												</expression>
											</term>
											<term/>
										</expression>
									</term>
								</term>
							</expression>
						</ifStatement>
						<doStatement>
							<keyword>do</keyword>
							<identifier>Memory</identifier>
							<symbol>.</symbol>
							<identifier>poke</identifier>
							<expressionList>
								<expression>
									<term/>
									<term/>
								</expression>
								<symbol>,</symbol>
							</expressionList>
							<symbol>;</symbol>
						</doStatement>
					</statements>
				</whileStatement>
				<doStatement>
					<keyword>do</keyword>
					<identifier>Memory</identifier>
					<symbol>.</symbol>
					<identifier>poke</identifier>
					<expressionList>
						<expression>
							<term/>
							<term/>
						</expression>
						<symbol>,</symbol>
					</expressionList>
					<symbol>;</symbol>
				</doStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol>}</symbol>
</class>
