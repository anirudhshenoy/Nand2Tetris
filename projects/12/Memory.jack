// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, remain;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = null;
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int size_remaining;
        var Array address, prevObject;
        let address = freeList;
        let prevObject = null;
        while(~(address[1] > (size +2))){
            let prevObject = address;
            let address = address[0]; 
            if (address = null){
                return 0;
            }
        }
        let size_remaining= freeList[1];
        let freeList = address + size + 2;
        if (~(prevObject = null)){
            let prevObject[0] = freeList;
        }
        let freeList[0] = null;
        let freeList[1] = size_remaining - (size +2);
        let address[1] = size;
        return (address + 2);
        
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array obj) {
        let obj = obj - 2;
        let freeList[0] = obj;
        let obj[0] = null;
        return;
    }    
}
